/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 101955.0, "series": [{"data": [[0.0, 25.0], [0.1, 39.0], [0.2, 46.0], [0.3, 47.0], [0.4, 49.0], [0.5, 50.0], [0.6, 51.0], [0.7, 52.0], [0.8, 53.0], [0.9, 55.0], [1.0, 56.0], [1.1, 57.0], [1.2, 59.0], [1.3, 60.0], [1.4, 61.0], [1.5, 63.0], [1.6, 64.0], [1.7, 65.0], [1.8, 67.0], [1.9, 68.0], [2.0, 70.0], [2.1, 71.0], [2.2, 73.0], [2.3, 74.0], [2.4, 75.0], [2.5, 77.0], [2.6, 78.0], [2.7, 80.0], [2.8, 81.0], [2.9, 82.0], [3.0, 83.0], [3.1, 84.0], [3.2, 85.0], [3.3, 86.0], [3.4, 87.0], [3.5, 87.0], [3.6, 88.0], [3.7, 88.0], [3.8, 89.0], [3.9, 90.0], [4.0, 90.0], [4.1, 91.0], [4.2, 91.0], [4.3, 91.0], [4.4, 92.0], [4.5, 92.0], [4.6, 93.0], [4.7, 93.0], [4.8, 93.0], [4.9, 94.0], [5.0, 94.0], [5.1, 95.0], [5.2, 95.0], [5.3, 96.0], [5.4, 96.0], [5.5, 96.0], [5.6, 97.0], [5.7, 97.0], [5.8, 98.0], [5.9, 98.0], [6.0, 98.0], [6.1, 99.0], [6.2, 99.0], [6.3, 99.0], [6.4, 100.0], [6.5, 100.0], [6.6, 100.0], [6.7, 101.0], [6.8, 101.0], [6.9, 101.0], [7.0, 102.0], [7.1, 102.0], [7.2, 102.0], [7.3, 103.0], [7.4, 103.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 105.0], [7.9, 105.0], [8.0, 105.0], [8.1, 106.0], [8.2, 106.0], [8.3, 107.0], [8.4, 107.0], [8.5, 107.0], [8.6, 108.0], [8.7, 108.0], [8.8, 109.0], [8.9, 109.0], [9.0, 109.0], [9.1, 110.0], [9.2, 110.0], [9.3, 111.0], [9.4, 111.0], [9.5, 112.0], [9.6, 112.0], [9.7, 113.0], [9.8, 113.0], [9.9, 114.0], [10.0, 115.0], [10.1, 115.0], [10.2, 116.0], [10.3, 116.0], [10.4, 117.0], [10.5, 117.0], [10.6, 118.0], [10.7, 118.0], [10.8, 119.0], [10.9, 119.0], [11.0, 120.0], [11.1, 120.0], [11.2, 121.0], [11.3, 122.0], [11.4, 122.0], [11.5, 123.0], [11.6, 123.0], [11.7, 124.0], [11.8, 124.0], [11.9, 125.0], [12.0, 125.0], [12.1, 125.0], [12.2, 126.0], [12.3, 126.0], [12.4, 127.0], [12.5, 127.0], [12.6, 128.0], [12.7, 128.0], [12.8, 128.0], [12.9, 129.0], [13.0, 129.0], [13.1, 129.0], [13.2, 130.0], [13.3, 130.0], [13.4, 131.0], [13.5, 131.0], [13.6, 131.0], [13.7, 132.0], [13.8, 132.0], [13.9, 132.0], [14.0, 133.0], [14.1, 133.0], [14.2, 133.0], [14.3, 133.0], [14.4, 134.0], [14.5, 134.0], [14.6, 134.0], [14.7, 134.0], [14.8, 135.0], [14.9, 135.0], [15.0, 135.0], [15.1, 136.0], [15.2, 136.0], [15.3, 136.0], [15.4, 136.0], [15.5, 137.0], [15.6, 137.0], [15.7, 137.0], [15.8, 137.0], [15.9, 138.0], [16.0, 138.0], [16.1, 138.0], [16.2, 138.0], [16.3, 139.0], [16.4, 139.0], [16.5, 139.0], [16.6, 139.0], [16.7, 140.0], [16.8, 140.0], [16.9, 140.0], [17.0, 140.0], [17.1, 140.0], [17.2, 141.0], [17.3, 141.0], [17.4, 141.0], [17.5, 141.0], [17.6, 141.0], [17.7, 142.0], [17.8, 142.0], [17.9, 142.0], [18.0, 142.0], [18.1, 142.0], [18.2, 143.0], [18.3, 143.0], [18.4, 143.0], [18.5, 143.0], [18.6, 143.0], [18.7, 143.0], [18.8, 144.0], [18.9, 144.0], [19.0, 144.0], [19.1, 144.0], [19.2, 144.0], [19.3, 144.0], [19.4, 144.0], [19.5, 145.0], [19.6, 145.0], [19.7, 145.0], [19.8, 145.0], [19.9, 145.0], [20.0, 145.0], [20.1, 146.0], [20.2, 146.0], [20.3, 146.0], [20.4, 146.0], [20.5, 146.0], [20.6, 146.0], [20.7, 146.0], [20.8, 147.0], [20.9, 147.0], [21.0, 147.0], [21.1, 147.0], [21.2, 147.0], [21.3, 147.0], [21.4, 147.0], [21.5, 147.0], [21.6, 148.0], [21.7, 148.0], [21.8, 148.0], [21.9, 148.0], [22.0, 148.0], [22.1, 148.0], [22.2, 148.0], [22.3, 148.0], [22.4, 148.0], [22.5, 148.0], [22.6, 149.0], [22.7, 149.0], [22.8, 149.0], [22.9, 149.0], [23.0, 149.0], [23.1, 149.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 150.0], [23.6, 150.0], [23.7, 150.0], [23.8, 150.0], [23.9, 150.0], [24.0, 150.0], [24.1, 150.0], [24.2, 150.0], [24.3, 150.0], [24.4, 150.0], [24.5, 150.0], [24.6, 150.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 151.0], [25.1, 151.0], [25.2, 151.0], [25.3, 151.0], [25.4, 151.0], [25.5, 151.0], [25.6, 151.0], [25.7, 151.0], [25.8, 151.0], [25.9, 152.0], [26.0, 152.0], [26.1, 152.0], [26.2, 152.0], [26.3, 152.0], [26.4, 152.0], [26.5, 152.0], [26.6, 152.0], [26.7, 152.0], [26.8, 152.0], [26.9, 152.0], [27.0, 152.0], [27.1, 153.0], [27.2, 153.0], [27.3, 153.0], [27.4, 153.0], [27.5, 153.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 153.0], [28.1, 153.0], [28.2, 153.0], [28.3, 153.0], [28.4, 154.0], [28.5, 154.0], [28.6, 154.0], [28.7, 154.0], [28.8, 154.0], [28.9, 154.0], [29.0, 154.0], [29.1, 154.0], [29.2, 154.0], [29.3, 154.0], [29.4, 154.0], [29.5, 154.0], [29.6, 155.0], [29.7, 155.0], [29.8, 155.0], [29.9, 155.0], [30.0, 155.0], [30.1, 155.0], [30.2, 155.0], [30.3, 155.0], [30.4, 155.0], [30.5, 155.0], [30.6, 155.0], [30.7, 155.0], [30.8, 155.0], [30.9, 156.0], [31.0, 156.0], [31.1, 156.0], [31.2, 156.0], [31.3, 156.0], [31.4, 156.0], [31.5, 156.0], [31.6, 156.0], [31.7, 156.0], [31.8, 156.0], [31.9, 156.0], [32.0, 156.0], [32.1, 156.0], [32.2, 156.0], [32.3, 157.0], [32.4, 157.0], [32.5, 157.0], [32.6, 157.0], [32.7, 157.0], [32.8, 157.0], [32.9, 157.0], [33.0, 157.0], [33.1, 157.0], [33.2, 157.0], [33.3, 157.0], [33.4, 157.0], [33.5, 157.0], [33.6, 157.0], [33.7, 158.0], [33.8, 158.0], [33.9, 158.0], [34.0, 158.0], [34.1, 158.0], [34.2, 158.0], [34.3, 158.0], [34.4, 158.0], [34.5, 158.0], [34.6, 158.0], [34.7, 158.0], [34.8, 158.0], [34.9, 158.0], [35.0, 158.0], [35.1, 158.0], [35.2, 159.0], [35.3, 159.0], [35.4, 159.0], [35.5, 159.0], [35.6, 159.0], [35.7, 159.0], [35.8, 159.0], [35.9, 159.0], [36.0, 159.0], [36.1, 159.0], [36.2, 159.0], [36.3, 159.0], [36.4, 159.0], [36.5, 160.0], [36.6, 160.0], [36.7, 160.0], [36.8, 160.0], [36.9, 160.0], [37.0, 160.0], [37.1, 160.0], [37.2, 160.0], [37.3, 160.0], [37.4, 160.0], [37.5, 160.0], [37.6, 160.0], [37.7, 160.0], [37.8, 161.0], [37.9, 161.0], [38.0, 161.0], [38.1, 161.0], [38.2, 161.0], [38.3, 161.0], [38.4, 161.0], [38.5, 161.0], [38.6, 161.0], [38.7, 161.0], [38.8, 161.0], [38.9, 162.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 162.0], [39.4, 162.0], [39.5, 162.0], [39.6, 162.0], [39.7, 162.0], [39.8, 162.0], [39.9, 163.0], [40.0, 163.0], [40.1, 163.0], [40.2, 163.0], [40.3, 163.0], [40.4, 163.0], [40.5, 163.0], [40.6, 163.0], [40.7, 163.0], [40.8, 163.0], [40.9, 164.0], [41.0, 164.0], [41.1, 164.0], [41.2, 164.0], [41.3, 164.0], [41.4, 164.0], [41.5, 164.0], [41.6, 164.0], [41.7, 164.0], [41.8, 165.0], [41.9, 165.0], [42.0, 165.0], [42.1, 165.0], [42.2, 165.0], [42.3, 165.0], [42.4, 165.0], [42.5, 165.0], [42.6, 165.0], [42.7, 166.0], [42.8, 166.0], [42.9, 166.0], [43.0, 166.0], [43.1, 166.0], [43.2, 166.0], [43.3, 166.0], [43.4, 166.0], [43.5, 167.0], [43.6, 167.0], [43.7, 167.0], [43.8, 167.0], [43.9, 167.0], [44.0, 167.0], [44.1, 167.0], [44.2, 168.0], [44.3, 168.0], [44.4, 168.0], [44.5, 168.0], [44.6, 168.0], [44.7, 168.0], [44.8, 169.0], [44.9, 169.0], [45.0, 169.0], [45.1, 169.0], [45.2, 169.0], [45.3, 170.0], [45.4, 170.0], [45.5, 170.0], [45.6, 170.0], [45.7, 170.0], [45.8, 171.0], [45.9, 171.0], [46.0, 171.0], [46.1, 171.0], [46.2, 172.0], [46.3, 172.0], [46.4, 172.0], [46.5, 172.0], [46.6, 173.0], [46.7, 173.0], [46.8, 173.0], [46.9, 174.0], [47.0, 174.0], [47.1, 174.0], [47.2, 174.0], [47.3, 175.0], [47.4, 175.0], [47.5, 175.0], [47.6, 176.0], [47.7, 176.0], [47.8, 177.0], [47.9, 177.0], [48.0, 177.0], [48.1, 178.0], [48.2, 178.0], [48.3, 178.0], [48.4, 179.0], [48.5, 179.0], [48.6, 180.0], [48.7, 180.0], [48.8, 181.0], [48.9, 181.0], [49.0, 181.0], [49.1, 182.0], [49.2, 182.0], [49.3, 183.0], [49.4, 183.0], [49.5, 183.0], [49.6, 184.0], [49.7, 184.0], [49.8, 184.0], [49.9, 185.0], [50.0, 185.0], [50.1, 185.0], [50.2, 186.0], [50.3, 186.0], [50.4, 187.0], [50.5, 187.0], [50.6, 188.0], [50.7, 188.0], [50.8, 188.0], [50.9, 189.0], [51.0, 189.0], [51.1, 190.0], [51.2, 190.0], [51.3, 191.0], [51.4, 191.0], [51.5, 191.0], [51.6, 192.0], [51.7, 192.0], [51.8, 193.0], [51.9, 193.0], [52.0, 194.0], [52.1, 194.0], [52.2, 195.0], [52.3, 195.0], [52.4, 196.0], [52.5, 196.0], [52.6, 197.0], [52.7, 197.0], [52.8, 198.0], [52.9, 198.0], [53.0, 199.0], [53.1, 199.0], [53.2, 200.0], [53.3, 200.0], [53.4, 201.0], [53.5, 201.0], [53.6, 202.0], [53.7, 202.0], [53.8, 203.0], [53.9, 203.0], [54.0, 204.0], [54.1, 205.0], [54.2, 205.0], [54.3, 206.0], [54.4, 207.0], [54.5, 207.0], [54.6, 208.0], [54.7, 208.0], [54.8, 209.0], [54.9, 210.0], [55.0, 210.0], [55.1, 211.0], [55.2, 211.0], [55.3, 212.0], [55.4, 213.0], [55.5, 213.0], [55.6, 214.0], [55.7, 214.0], [55.8, 215.0], [55.9, 215.0], [56.0, 216.0], [56.1, 216.0], [56.2, 217.0], [56.3, 217.0], [56.4, 218.0], [56.5, 218.0], [56.6, 219.0], [56.7, 219.0], [56.8, 220.0], [56.9, 220.0], [57.0, 221.0], [57.1, 221.0], [57.2, 222.0], [57.3, 223.0], [57.4, 223.0], [57.5, 223.0], [57.6, 224.0], [57.7, 224.0], [57.8, 225.0], [57.9, 225.0], [58.0, 226.0], [58.1, 226.0], [58.2, 227.0], [58.3, 227.0], [58.4, 227.0], [58.5, 228.0], [58.6, 228.0], [58.7, 229.0], [58.8, 229.0], [58.9, 230.0], [59.0, 230.0], [59.1, 231.0], [59.2, 231.0], [59.3, 231.0], [59.4, 232.0], [59.5, 232.0], [59.6, 233.0], [59.7, 233.0], [59.8, 233.0], [59.9, 234.0], [60.0, 234.0], [60.1, 234.0], [60.2, 235.0], [60.3, 235.0], [60.4, 235.0], [60.5, 236.0], [60.6, 236.0], [60.7, 237.0], [60.8, 237.0], [60.9, 237.0], [61.0, 238.0], [61.1, 238.0], [61.2, 238.0], [61.3, 239.0], [61.4, 239.0], [61.5, 239.0], [61.6, 240.0], [61.7, 240.0], [61.8, 240.0], [61.9, 241.0], [62.0, 241.0], [62.1, 241.0], [62.2, 242.0], [62.3, 242.0], [62.4, 242.0], [62.5, 242.0], [62.6, 243.0], [62.7, 243.0], [62.8, 243.0], [62.9, 244.0], [63.0, 244.0], [63.1, 244.0], [63.2, 245.0], [63.3, 245.0], [63.4, 245.0], [63.5, 246.0], [63.6, 246.0], [63.7, 246.0], [63.8, 247.0], [63.9, 247.0], [64.0, 247.0], [64.1, 248.0], [64.2, 248.0], [64.3, 248.0], [64.4, 249.0], [64.5, 249.0], [64.6, 249.0], [64.7, 249.0], [64.8, 250.0], [64.9, 250.0], [65.0, 250.0], [65.1, 251.0], [65.2, 251.0], [65.3, 251.0], [65.4, 252.0], [65.5, 252.0], [65.6, 252.0], [65.7, 253.0], [65.8, 253.0], [65.9, 253.0], [66.0, 254.0], [66.1, 254.0], [66.2, 254.0], [66.3, 255.0], [66.4, 255.0], [66.5, 255.0], [66.6, 256.0], [66.7, 256.0], [66.8, 256.0], [66.9, 256.0], [67.0, 257.0], [67.1, 257.0], [67.2, 257.0], [67.3, 258.0], [67.4, 258.0], [67.5, 258.0], [67.6, 259.0], [67.7, 259.0], [67.8, 259.0], [67.9, 259.0], [68.0, 260.0], [68.1, 260.0], [68.2, 260.0], [68.3, 261.0], [68.4, 261.0], [68.5, 261.0], [68.6, 262.0], [68.7, 262.0], [68.8, 262.0], [68.9, 262.0], [69.0, 263.0], [69.1, 263.0], [69.2, 263.0], [69.3, 264.0], [69.4, 264.0], [69.5, 264.0], [69.6, 264.0], [69.7, 265.0], [69.8, 265.0], [69.9, 265.0], [70.0, 266.0], [70.1, 266.0], [70.2, 266.0], [70.3, 266.0], [70.4, 266.0], [70.5, 267.0], [70.6, 267.0], [70.7, 267.0], [70.8, 268.0], [70.9, 268.0], [71.0, 268.0], [71.1, 268.0], [71.2, 268.0], [71.3, 269.0], [71.4, 269.0], [71.5, 269.0], [71.6, 269.0], [71.7, 270.0], [71.8, 270.0], [71.9, 270.0], [72.0, 270.0], [72.1, 271.0], [72.2, 271.0], [72.3, 271.0], [72.4, 271.0], [72.5, 272.0], [72.6, 272.0], [72.7, 272.0], [72.8, 272.0], [72.9, 273.0], [73.0, 273.0], [73.1, 273.0], [73.2, 273.0], [73.3, 274.0], [73.4, 274.0], [73.5, 274.0], [73.6, 274.0], [73.7, 274.0], [73.8, 275.0], [73.9, 275.0], [74.0, 275.0], [74.1, 275.0], [74.2, 276.0], [74.3, 276.0], [74.4, 276.0], [74.5, 276.0], [74.6, 276.0], [74.7, 277.0], [74.8, 277.0], [74.9, 277.0], [75.0, 277.0], [75.1, 277.0], [75.2, 278.0], [75.3, 278.0], [75.4, 278.0], [75.5, 278.0], [75.6, 279.0], [75.7, 279.0], [75.8, 279.0], [75.9, 279.0], [76.0, 279.0], [76.1, 280.0], [76.2, 280.0], [76.3, 280.0], [76.4, 280.0], [76.5, 281.0], [76.6, 281.0], [76.7, 281.0], [76.8, 281.0], [76.9, 281.0], [77.0, 282.0], [77.1, 282.0], [77.2, 282.0], [77.3, 282.0], [77.4, 282.0], [77.5, 282.0], [77.6, 283.0], [77.7, 283.0], [77.8, 283.0], [77.9, 283.0], [78.0, 283.0], [78.1, 284.0], [78.2, 284.0], [78.3, 284.0], [78.4, 284.0], [78.5, 284.0], [78.6, 285.0], [78.7, 285.0], [78.8, 285.0], [78.9, 285.0], [79.0, 285.0], [79.1, 286.0], [79.2, 286.0], [79.3, 286.0], [79.4, 286.0], [79.5, 287.0], [79.6, 287.0], [79.7, 287.0], [79.8, 287.0], [79.9, 287.0], [80.0, 288.0], [80.1, 288.0], [80.2, 288.0], [80.3, 288.0], [80.4, 289.0], [80.5, 289.0], [80.6, 289.0], [80.7, 289.0], [80.8, 289.0], [80.9, 290.0], [81.0, 290.0], [81.1, 290.0], [81.2, 290.0], [81.3, 290.0], [81.4, 291.0], [81.5, 291.0], [81.6, 291.0], [81.7, 291.0], [81.8, 292.0], [81.9, 292.0], [82.0, 292.0], [82.1, 292.0], [82.2, 292.0], [82.3, 293.0], [82.4, 293.0], [82.5, 293.0], [82.6, 293.0], [82.7, 293.0], [82.8, 294.0], [82.9, 294.0], [83.0, 294.0], [83.1, 294.0], [83.2, 295.0], [83.3, 295.0], [83.4, 295.0], [83.5, 295.0], [83.6, 296.0], [83.7, 296.0], [83.8, 296.0], [83.9, 296.0], [84.0, 297.0], [84.1, 297.0], [84.2, 297.0], [84.3, 297.0], [84.4, 298.0], [84.5, 298.0], [84.6, 298.0], [84.7, 298.0], [84.8, 299.0], [84.9, 299.0], [85.0, 299.0], [85.1, 300.0], [85.2, 300.0], [85.3, 300.0], [85.4, 300.0], [85.5, 301.0], [85.6, 301.0], [85.7, 301.0], [85.8, 302.0], [85.9, 302.0], [86.0, 302.0], [86.1, 303.0], [86.2, 303.0], [86.3, 303.0], [86.4, 304.0], [86.5, 304.0], [86.6, 304.0], [86.7, 305.0], [86.8, 305.0], [86.9, 305.0], [87.0, 306.0], [87.1, 306.0], [87.2, 306.0], [87.3, 307.0], [87.4, 307.0], [87.5, 308.0], [87.6, 308.0], [87.7, 308.0], [87.8, 309.0], [87.9, 309.0], [88.0, 309.0], [88.1, 310.0], [88.2, 310.0], [88.3, 311.0], [88.4, 311.0], [88.5, 312.0], [88.6, 312.0], [88.7, 313.0], [88.8, 313.0], [88.9, 314.0], [89.0, 314.0], [89.1, 314.0], [89.2, 315.0], [89.3, 315.0], [89.4, 316.0], [89.5, 316.0], [89.6, 317.0], [89.7, 317.0], [89.8, 318.0], [89.9, 318.0], [90.0, 319.0], [90.1, 319.0], [90.2, 320.0], [90.3, 321.0], [90.4, 321.0], [90.5, 322.0], [90.6, 323.0], [90.7, 323.0], [90.8, 324.0], [90.9, 324.0], [91.0, 325.0], [91.1, 326.0], [91.2, 327.0], [91.3, 327.0], [91.4, 328.0], [91.5, 329.0], [91.6, 330.0], [91.7, 331.0], [91.8, 332.0], [91.9, 332.0], [92.0, 333.0], [92.1, 334.0], [92.2, 336.0], [92.3, 337.0], [92.4, 338.0], [92.5, 339.0], [92.6, 341.0], [92.7, 342.0], [92.8, 344.0], [92.9, 345.0], [93.0, 347.0], [93.1, 349.0], [93.2, 350.0], [93.3, 352.0], [93.4, 355.0], [93.5, 357.0], [93.6, 360.0], [93.7, 363.0], [93.8, 366.0], [93.9, 369.0], [94.0, 373.0], [94.1, 376.0], [94.2, 380.0], [94.3, 384.0], [94.4, 389.0], [94.5, 392.0], [94.6, 396.0], [94.7, 400.0], [94.8, 404.0], [94.9, 409.0], [95.0, 414.0], [95.1, 418.0], [95.2, 423.0], [95.3, 427.0], [95.4, 433.0], [95.5, 438.0], [95.6, 443.0], [95.7, 447.0], [95.8, 451.0], [95.9, 454.0], [96.0, 458.0], [96.1, 461.0], [96.2, 464.0], [96.3, 466.0], [96.4, 469.0], [96.5, 471.0], [96.6, 474.0], [96.7, 478.0], [96.8, 481.0], [96.9, 484.0], [97.0, 488.0], [97.1, 492.0], [97.2, 495.0], [97.3, 498.0], [97.4, 502.0], [97.5, 505.0], [97.6, 508.0], [97.7, 512.0], [97.8, 516.0], [97.9, 520.0], [98.0, 525.0], [98.1, 530.0], [98.2, 535.0], [98.3, 541.0], [98.4, 555.0], [98.5, 568.0], [98.6, 577.0], [98.7, 588.0], [98.8, 597.0], [98.9, 606.0], [99.0, 617.0], [99.1, 629.0], [99.2, 647.0], [99.3, 672.0], [99.4, 717.0], [99.5, 762.0], [99.6, 826.0], [99.7, 889.0], [99.8, 1068.0], [99.9, 1716.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 187509.0, "series": [{"data": [[0.0, 25223.0], [600.0, 2150.0], [700.0, 780.0], [800.0, 624.0], [900.0, 237.0], [1000.0, 144.0], [1100.0, 139.0], [1200.0, 62.0], [1300.0, 38.0], [1400.0, 47.0], [1500.0, 27.0], [1600.0, 44.0], [1700.0, 23.0], [1800.0, 37.0], [1900.0, 25.0], [2100.0, 5.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 4.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3400.0, 3.0], [3500.0, 2.0], [3700.0, 3.0], [3900.0, 1.0], [4200.0, 2.0], [4400.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [4700.0, 2.0], [5300.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [5700.0, 3.0], [6300.0, 1.0], [101100.0, 19.0], [101300.0, 28.0], [101500.0, 22.0], [101700.0, 33.0], [101900.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [8300.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [10700.0, 11.0], [10300.0, 1.0], [10400.0, 4.0], [10500.0, 23.0], [10600.0, 6.0], [11200.0, 3.0], [10800.0, 6.0], [10900.0, 4.0], [11000.0, 2.0], [11100.0, 11.0], [11600.0, 1.0], [11300.0, 1.0], [100.0, 187509.0], [200.0, 127519.0], [300.0, 38476.0], [101200.0, 16.0], [101400.0, 16.0], [101600.0, 22.0], [101800.0, 23.0], [400.0, 10617.0], [500.0, 5962.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 291.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 235223.0, "series": [{"data": [[0.0, 235223.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8385.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 291.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 156101.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 33.242389758179186, "minX": 1.64516226E12, "maxY": 200.0, "series": [{"data": [[1.64516226E12, 33.242389758179186], [1.64516256E12, 200.0], [1.64516262E12, 200.0], [1.64516244E12, 200.0], [1.64516292E12, 36.994972167355094], [1.6451625E12, 200.0], [1.64516232E12, 104.95164856763735], [1.6451628E12, 169.37423811458768], [1.64516238E12, 191.43770194171793], [1.64516286E12, 121.86860494135239], [1.64516268E12, 195.3196454020624]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64516292E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.666666666666664, "minX": 1.0, "maxY": 10644.173539518897, "series": [{"data": [[2.0, 47.0], [3.0, 47.65625000000001], [4.0, 48.199999999999996], [5.0, 45.666666666666664], [6.0, 50.57142857142857], [7.0, 49.1], [8.0, 51.75757575757576], [9.0, 52.025], [10.0, 49.16000000000001], [11.0, 48.44680851063829], [12.0, 48.29457364341084], [13.0, 48.36363636363637], [14.0, 50.3698224852071], [15.0, 48.14473684210528], [16.0, 49.46296296296296], [17.0, 49.05263157894736], [18.0, 49.26086956521739], [19.0, 49.25], [20.0, 50.714285714285715], [21.0, 50.38888888888889], [22.0, 49.262711864406796], [23.0, 49.54545454545455], [24.0, 1557.4329896907216], [25.0, 84.25609756097565], [26.0, 64.99999999999997], [27.0, 63.54397394136803], [28.0, 64.63018867924526], [29.0, 62.47380952380953], [30.0, 63.38734177215192], [31.0, 75.87372013651874], [32.0, 70.11462450592877], [33.0, 73.15277777777783], [34.0, 68.79999999999994], [35.0, 67.41424802110821], [36.0, 84.73140495867764], [37.0, 101.43930635838146], [38.0, 74.39130434782606], [39.0, 75.14673913043472], [40.0, 91.72614107883825], [41.0, 73.48859934853422], [42.0, 80.91836734693881], [43.0, 65.78886310904868], [44.0, 68.42375168690957], [45.0, 83.9169230769231], [46.0, 79.69924812030067], [47.0, 87.67148014440437], [48.0, 88.68506493506489], [49.0, 105.78645833333329], [50.0, 126.60557768924308], [51.0, 87.32898172323762], [52.0, 81.53562653562653], [53.0, 84.26906779661016], [54.0, 91.92244897959179], [55.0, 102.78656126482214], [56.0, 92.59002169197394], [57.0, 101.5416666666666], [58.0, 88.96503496503497], [59.0, 87.08924485125871], [60.0, 99.34430379746829], [61.0, 93.63786008230443], [62.0, 98.23982869379017], [63.0, 107.25490196078422], [64.0, 109.10427807486629], [65.0, 122.62622950819677], [66.0, 125.49401197604794], [67.0, 118.31794871794871], [68.0, 112.62499999999996], [69.0, 108.23480083857444], [70.0, 106.59966638865717], [71.0, 99.03764705882355], [72.0, 108.38888888888894], [73.0, 110.09273182957399], [74.0, 116.47927461139899], [75.0, 113.13157894736838], [76.0, 99.77268560953249], [77.0, 110.19431279620848], [78.0, 116.92420537897316], [79.0, 113.0565610859727], [80.0, 127.95277777777778], [81.0, 103.5859124866596], [82.0, 107.70212765957444], [83.0, 119.10375275938189], [84.0, 117.72775800711734], [85.0, 114.98085106382975], [86.0, 111.20991561181431], [87.0, 116.6077922077922], [88.0, 105.30769230769224], [89.0, 119.47337278106508], [90.0, 110.98790322580648], [91.0, 120.47692307692307], [92.0, 122.8638297872339], [93.0, 126.26851851851863], [94.0, 139.90909090909093], [95.0, 124.86178861788618], [96.0, 139.9154929577464], [97.0, 137.00255754475697], [98.0, 132.10590631364562], [99.0, 150.41253869969017], [100.0, 137.01348920863282], [101.0, 155.77912621359235], [102.0, 141.51569506726457], [103.0, 145.91881918819163], [104.0, 146.77330508474572], [105.0, 186.34194831013906], [106.0, 145.85737976782764], [107.0, 152.18978102189783], [108.0, 171.49625187406295], [109.0, 173.52079866888513], [110.0, 156.95343680709536], [111.0, 157.1800679501698], [112.0, 188.74622356495487], [113.0, 167.02411575562695], [114.0, 174.3674698795181], [115.0, 158.9340338587273], [116.0, 158.5213815789475], [117.0, 157.070530726257], [118.0, 157.91621327529924], [119.0, 154.44080145719488], [120.0, 167.1645091693635], [121.0, 148.14387917329077], [122.0, 156.3674796747968], [123.0, 144.52988691437787], [124.0, 155.33705357142858], [125.0, 161.2142099681867], [126.0, 171.79665492957744], [127.0, 194.98412698412707], [128.0, 171.5466730493058], [129.0, 181.19999999999987], [130.0, 177.61931818181816], [131.0, 185.34965831435082], [132.0, 185.54267515923559], [133.0, 197.6223958333333], [134.0, 190.52805280528042], [135.0, 183.24318869828423], [136.0, 183.5889281507655], [137.0, 180.87106446776625], [138.0, 190.57101865136318], [139.0, 197.37378640776694], [140.0, 189.53297682709427], [141.0, 185.33118027011147], [142.0, 165.59801980198012], [143.0, 173.26980198019785], [144.0, 187.25501432664754], [145.0, 200.53931339977822], [146.0, 191.27376425855522], [147.0, 231.0124003542957], [148.0, 196.4073756432244], [149.0, 217.47543160690572], [150.0, 240.6087182148419], [151.0, 193.76534296028888], [152.0, 278.7045690550357], [153.0, 319.2906465787822], [154.0, 279.4477911646586], [155.0, 388.79518072289136], [156.0, 481.4385524901471], [157.0, 188.2508992805755], [158.0, 182.92563291139226], [159.0, 176.99206349206327], [160.0, 210.79701120797012], [161.0, 208.65861027190343], [162.0, 202.69059405940592], [163.0, 189.55131264916463], [164.0, 205.20092024539883], [165.0, 178.65820895522384], [166.0, 152.63781321184499], [167.0, 151.13947696139448], [168.0, 160.9886597938144], [169.0, 149.46600418410046], [170.0, 174.25388967468177], [171.0, 172.45637583892602], [172.0, 214.18196457326903], [173.0, 196.30523917995438], [174.0, 239.12470588235297], [175.0, 190.79837618403272], [176.0, 222.71991247264768], [177.0, 158.51098783870248], [178.0, 204.49514563106794], [179.0, 206.56084996780393], [180.0, 10644.173539518897], [181.0, 110.56565656565654], [182.0, 216.47046843177202], [183.0, 185.63322884012524], [184.0, 170.63353036002152], [185.0, 261.5910707230342], [186.0, 248.34269662921352], [187.0, 277.61288515406153], [188.0, 284.2407749077491], [189.0, 283.2519893899204], [190.0, 285.9288793103446], [191.0, 286.4274640088592], [192.0, 282.4384858044163], [193.0, 237.2384937238493], [194.0, 260.1450471698115], [195.0, 291.49696969696987], [196.0, 268.24593495935], [197.0, 276.8924418604653], [198.0, 275.4099358974356], [199.0, 269.4198717948721], [200.0, 243.24216065792814], [1.0, 48.90909090909091]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[176.07929750000065, 267.249072499994]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18101.533333333333, "minX": 1.64516226E12, "maxY": 2894047.4, "series": [{"data": [[1.64516226E12, 214997.55], [1.64516256E12, 2389876.1166666667], [1.64516262E12, 2591163.45], [1.64516244E12, 2690724.966666667], [1.64516292E12, 342067.6666666667], [1.6451625E12, 2894047.4], [1.64516232E12, 2489433.9833333334], [1.6451628E12, 810645.3666666667], [1.64516238E12, 1987141.0666666667], [1.64516286E12, 2326233.85], [1.64516268E12, 2287296.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64516226E12, 18101.533333333333], [1.64516256E12, 214263.6], [1.64516262E12, 219726.6], [1.64516244E12, 322507.06666666665], [1.64516292E12, 28866.4], [1.6451625E12, 366005.5], [1.64516232E12, 210627.23333333334], [1.6451628E12, 102049.73333333334], [1.64516238E12, 168330.4], [1.64516286E12, 207697.03333333333], [1.64516268E12, 214584.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64516292E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 65.46722930508164, "minX": 1.64516226E12, "maxY": 1119.1331775700855, "series": [{"data": [[1.64516226E12, 120.47795163584667], [1.64516256E12, 289.8668021385175], [1.64516262E12, 282.95213606661827], [1.64516244E12, 193.16300225007993], [1.64516292E12, 65.46722930508164], [1.6451625E12, 170.03168016767887], [1.64516232E12, 148.75893076507313], [1.6451628E12, 1119.1331775700855], [1.64516238E12, 356.35234021601946], [1.64516286E12, 188.88427751435123], [1.64516268E12, 262.6290490108482]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64516292E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 65.21206679834773, "minX": 1.64516226E12, "maxY": 1119.1235270215382, "series": [{"data": [[1.64516226E12, 120.19943100995677], [1.64516256E12, 289.5267677867299], [1.64516262E12, 282.7038522327843], [1.64516244E12, 193.14985535197755], [1.64516292E12, 65.21206679834773], [1.6451625E12, 170.02431598028616], [1.64516232E12, 148.4948651171938], [1.6451628E12, 1119.1235270215382], [1.64516238E12, 356.175062313445], [1.64516286E12, 188.54120289493534], [1.64516268E12, 262.42034831758934]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64516292E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64516226E12, "maxY": 11.346251523770968, "series": [{"data": [[1.64516226E12, 1.57894736842105], [1.64516256E12, 1.71132399545202], [1.64516262E12, 1.9358354367672257], [1.64516244E12, 5.820218579234908], [1.64516292E12, 0.0], [1.6451625E12, 4.731929417096256], [1.64516232E12, 0.8267161318854108], [1.6451628E12, 11.346251523770968], [1.64516238E12, 1.6699079915069224], [1.64516286E12, 0.6147991015722499], [1.64516268E12, 1.7499214956883118]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64516292E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 44.0, "minX": 1.64516226E12, "maxY": 101955.0, "series": [{"data": [[1.64516226E12, 11629.0], [1.64516256E12, 1624.0], [1.64516262E12, 1769.0], [1.64516244E12, 11340.0], [1.64516292E12, 136.0], [1.64516232E12, 650.0], [1.6451628E12, 101955.0], [1.64516238E12, 2371.0], [1.64516286E12, 1766.0], [1.64516268E12, 1474.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64516226E12, 119.0], [1.64516256E12, 323.0], [1.64516262E12, 326.0], [1.64516244E12, 493.0], [1.64516292E12, 91.0], [1.64516232E12, 238.0], [1.6451628E12, 101825.5], [1.64516238E12, 613.0], [1.64516286E12, 181.0], [1.64516268E12, 323.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64516226E12, 247.52000000000044], [1.64516256E12, 379.0], [1.64516262E12, 485.9900000000016], [1.64516244E12, 7713.699999999962], [1.64516292E12, 112.30000000000018], [1.64516232E12, 338.9900000000016], [1.6451628E12, 101898.3], [1.64516238E12, 885.0], [1.64516286E12, 232.0], [1.64516268E12, 435.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64516226E12, 136.0], [1.64516256E12, 336.0], [1.64516262E12, 356.0], [1.64516244E12, 574.0], [1.64516292E12, 98.0], [1.64516232E12, 264.0], [1.6451628E12, 101849.95], [1.64516238E12, 713.0], [1.64516286E12, 197.0], [1.64516268E12, 342.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64516226E12, 45.0], [1.64516256E12, 149.0], [1.64516262E12, 142.0], [1.64516244E12, 153.0], [1.64516292E12, 44.0], [1.64516232E12, 46.0], [1.6451628E12, 101137.0], [1.64516238E12, 111.0], [1.64516286E12, 59.0], [1.64516268E12, 189.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64516226E12, 69.0], [1.64516256E12, 276.0], [1.64516262E12, 285.0], [1.64516244E12, 235.0], [1.64516292E12, 60.0], [1.64516232E12, 169.0], [1.6451628E12, 101571.0], [1.64516238E12, 458.0], [1.64516286E12, 136.0], [1.64516268E12, 280.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64516292E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 4.0, "maxY": 101413.5, "series": [{"data": [[4.0, 51.5], [44.0, 47.0], [123.0, 49.0], [152.0, 116.0], [183.0, 50.0], [254.0, 48.0], [287.0, 491.0], [281.0, 50.0], [289.0, 101413.5], [306.0, 531.0], [323.0, 535.0], [330.0, 585.0], [349.0, 467.0], [362.0, 471.0], [363.0, 531.0], [353.0, 516.0], [366.0, 565.5], [365.0, 506.0], [367.0, 588.0], [354.0, 479.0], [360.0, 527.0], [355.0, 49.0], [369.0, 388.0], [373.0, 521.0], [380.0, 470.0], [382.0, 502.0], [374.0, 466.0], [378.0, 507.0], [377.0, 510.0], [389.0, 210.0], [395.0, 372.0], [399.0, 496.0], [388.0, 502.0], [391.0, 499.0], [393.0, 501.0], [390.0, 532.0], [403.0, 328.5], [415.0, 506.0], [404.0, 533.0], [428.0, 460.0], [437.0, 69.0], [445.0, 65.0], [463.0, 74.0], [462.0, 84.0], [461.0, 478.0], [469.0, 94.0], [468.0, 410.0], [464.0, 314.0], [492.0, 85.0], [494.0, 455.0], [489.0, 397.0], [480.0, 329.0], [497.0, 133.0], [507.0, 427.0], [502.0, 293.0], [510.0, 51.5], [542.0, 78.0], [529.0, 77.0], [537.0, 107.0], [532.0, 120.5], [516.0, 301.5], [520.0, 243.5], [517.0, 283.0], [555.0, 115.0], [553.0, 280.0], [570.0, 94.0], [572.0, 118.0], [557.0, 333.0], [569.0, 303.5], [567.0, 338.0], [568.0, 55.0], [607.0, 243.0], [594.0, 80.0], [604.0, 89.5], [596.0, 99.0], [597.0, 251.0], [592.0, 329.0], [601.0, 322.0], [579.0, 260.5], [606.0, 323.0], [593.0, 357.0], [638.0, 217.0], [632.0, 222.5], [618.0, 296.0], [622.0, 90.0], [616.0, 167.0], [639.0, 272.0], [634.0, 304.0], [628.0, 312.0], [626.0, 297.0], [624.0, 317.0], [636.0, 297.0], [637.0, 291.0], [614.0, 299.0], [612.0, 252.0], [641.0, 90.0], [650.0, 272.0], [651.0, 293.0], [648.0, 311.0], [646.0, 155.0], [645.0, 316.0], [644.0, 294.0], [643.0, 173.0], [653.0, 230.0], [655.0, 302.0], [667.0, 274.0], [670.0, 163.0], [671.0, 272.0], [656.0, 304.0], [658.0, 310.0], [659.0, 311.0], [663.0, 298.0], [661.0, 304.0], [660.0, 289.0], [669.0, 212.0], [647.0, 266.0], [664.0, 297.0], [665.0, 294.0], [652.0, 302.0], [697.0, 226.5], [677.0, 270.0], [696.0, 282.0], [679.0, 293.0], [678.0, 294.0], [681.0, 165.0], [682.0, 253.0], [680.0, 286.0], [692.0, 164.5], [691.0, 147.0], [693.0, 170.0], [690.0, 227.5], [683.0, 220.0], [695.0, 265.5], [694.0, 283.0], [672.0, 265.0], [676.0, 286.0], [673.0, 299.0], [675.0, 280.0], [686.0, 282.0], [685.0, 292.0], [703.0, 280.0], [689.0, 273.0], [701.0, 284.0], [700.0, 274.0], [702.0, 284.0], [698.0, 285.0], [699.0, 275.0], [707.0, 259.0], [713.0, 269.0], [712.0, 186.0], [735.0, 138.0], [714.0, 216.0], [720.0, 208.0], [728.0, 107.5], [711.0, 265.0], [734.0, 461.0], [733.0, 276.0], [732.0, 259.0], [731.0, 257.0], [729.0, 272.0], [721.0, 240.0], [726.0, 194.0], [724.0, 235.0], [725.0, 146.0], [723.0, 268.0], [722.0, 206.0], [704.0, 168.0], [717.0, 277.0], [719.0, 279.0], [706.0, 276.0], [710.0, 189.0], [709.0, 276.0], [708.0, 286.0], [762.0, 200.0], [751.0, 109.0], [766.0, 230.0], [755.0, 169.0], [759.0, 236.0], [757.0, 246.0], [756.0, 193.5], [763.0, 220.0], [765.0, 238.0], [764.0, 248.5], [749.0, 171.0], [750.0, 280.0], [748.0, 252.0], [745.0, 272.0], [746.0, 267.0], [739.0, 203.0], [761.0, 268.0], [743.0, 269.0], [740.0, 264.0], [742.0, 261.0], [741.0, 265.0], [754.0, 233.0], [752.0, 262.0], [767.0, 124.0], [736.0, 264.0], [737.0, 250.0], [738.0, 250.0], [772.0, 129.0], [777.0, 226.0], [768.0, 257.0], [780.0, 246.0], [788.0, 150.0], [791.0, 224.0], [790.0, 247.0], [769.0, 240.0], [794.0, 226.0], [795.0, 116.0], [773.0, 260.0], [774.0, 266.0], [799.0, 250.0], [771.0, 258.0], [786.0, 248.0], [784.0, 143.0], [830.0, 172.0], [818.0, 190.0], [828.0, 194.0], [829.0, 150.0], [809.0, 180.0], [823.0, 219.0], [821.0, 101.0], [825.0, 301.5], [820.0, 244.0], [802.0, 249.0], [812.0, 100.0], [831.0, 240.0], [859.0, 156.0], [847.0, 159.0], [857.0, 173.0], [862.0, 241.0], [835.0, 241.0], [858.0, 92.0], [864.0, 162.0], [868.0, 225.0], [892.0, 400.0], [866.0, 390.0], [877.0, 209.0], [880.0, 230.5], [872.0, 257.0], [891.0, 229.0], [910.0, 236.0], [912.0, 238.0], [897.0, 137.0], [903.0, 134.0], [972.0, 219.0], [962.0, 225.0], [990.0, 269.0], [1002.0, 215.0], [1007.0, 213.0], [1006.0, 217.0], [1010.0, 216.0], [994.0, 244.0], [995.0, 237.0], [1028.0, 215.0], [1081.0, 182.5], [1147.0, 236.0], [1124.0, 197.0], [1265.0, 671.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[188.0, 439.0], [235.0, 424.0], [234.0, 419.0], [254.0, 424.0], [264.0, 419.0], [265.0, 393.0], [280.0, 416.0], [287.0, 322.0], [289.0, 188.0], [306.0, 386.0], [350.0, 414.0], [378.0, 28.0], [455.0, 310.0], [480.0, 306.5], [502.0, 9011.0], [516.0, 294.0], [634.0, 229.0], [620.0, 91.0], [646.0, 283.0], [686.0, 188.0], [701.0, 309.0], [734.0, 38.0], [704.0, 131.0], [738.0, 266.0], [779.0, 181.0], [823.0, 189.0], [815.0, 241.0], [831.0, 272.0], [825.0, 142.0], [862.0, 212.0], [845.0, 227.0], [836.0, 283.0], [866.0, 77.0], [892.0, 48.0], [877.0, 180.0], [880.0, 204.0], [872.0, 210.0], [891.0, 200.0], [876.0, 125.0], [871.0, 141.0], [894.0, 175.0], [910.0, 202.0], [912.0, 203.0], [908.0, 209.0], [911.0, 200.0], [936.0, 242.0], [949.0, 165.0], [945.0, 173.0], [972.0, 192.0], [962.0, 192.0], [990.0, 99.0], [985.0, 133.0], [994.0, 206.0], [1002.0, 188.0], [1007.0, 187.0], [1006.0, 189.0], [1010.0, 187.0], [1005.0, 108.0], [996.0, 162.5], [1011.0, 178.0], [995.0, 156.0], [1028.0, 184.0], [1044.0, 159.0], [1081.0, 163.0], [1086.0, 163.0], [1075.0, 142.0], [1034.0, 150.0], [1147.0, 123.0], [1124.0, 170.0], [1088.0, 138.0], [1125.0, 155.0], [1089.0, 167.0], [1116.0, 157.0], [1099.0, 163.0], [1148.0, 142.0], [1145.0, 145.0], [1202.0, 139.0], [1173.0, 143.0], [1170.0, 127.0], [1171.0, 154.0], [1188.0, 103.0], [1181.0, 149.0], [1176.0, 144.0], [1212.0, 160.0], [1187.0, 143.0], [1210.0, 150.0], [1199.0, 161.0], [1163.0, 169.0], [1201.0, 149.0], [1182.0, 165.0], [1203.0, 155.5], [1206.0, 160.0], [1207.0, 163.0], [1249.0, 154.0], [1229.0, 157.0], [1255.0, 101.0], [1239.0, 128.5], [1245.0, 157.0], [1219.0, 149.0], [1240.0, 155.0], [1241.0, 160.0], [1242.0, 160.0], [1222.0, 128.5], [1232.0, 159.0], [1234.0, 149.0], [1236.0, 156.0], [1261.0, 152.0], [1259.0, 155.0], [1260.0, 155.0], [1258.0, 157.0], [1256.0, 146.0], [1262.0, 160.0], [1250.0, 160.0], [1253.0, 158.0], [1254.0, 159.0], [1251.0, 158.0], [1223.0, 163.0], [1227.0, 156.0], [1225.0, 163.0], [1230.0, 160.0], [1264.0, 158.0], [1265.0, 157.0], [1231.0, 159.0], [1266.0, 156.0], [1273.0, 159.0], [1271.0, 156.0], [1278.0, 157.0], [1277.0, 153.0], [1288.0, 147.0], [1307.0, 151.0], [1282.0, 153.0], [1296.0, 153.0], [1285.0, 155.0], [1396.0, 140.0], [1931.0, 92.0], [1961.0, 92.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1961.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 4.0, "maxY": 101413.5, "series": [{"data": [[4.0, 51.5], [44.0, 47.0], [123.0, 49.0], [152.0, 116.0], [183.0, 50.0], [254.0, 48.0], [287.0, 491.0], [281.0, 50.0], [289.0, 101413.5], [306.0, 531.0], [323.0, 535.0], [330.0, 584.5], [349.0, 467.0], [362.0, 470.0], [363.0, 531.0], [353.0, 516.0], [366.0, 565.0], [365.0, 506.0], [367.0, 586.0], [354.0, 479.0], [360.0, 527.0], [355.0, 49.0], [369.0, 388.0], [373.0, 521.0], [380.0, 469.0], [382.0, 502.0], [374.0, 466.0], [378.0, 506.5], [377.0, 508.0], [389.0, 210.0], [395.0, 372.0], [399.0, 495.0], [388.0, 502.0], [391.0, 499.0], [393.0, 501.0], [390.0, 532.0], [403.0, 328.5], [415.0, 506.0], [404.0, 533.0], [428.0, 460.0], [437.0, 69.0], [445.0, 65.0], [463.0, 74.0], [462.0, 83.0], [461.0, 478.0], [469.0, 94.0], [468.0, 410.0], [464.0, 313.0], [492.0, 85.0], [494.0, 455.0], [489.0, 397.0], [480.0, 328.0], [497.0, 133.0], [507.0, 427.0], [502.0, 292.0], [510.0, 51.0], [542.0, 77.5], [529.0, 77.0], [537.0, 106.0], [532.0, 120.0], [516.0, 301.0], [520.0, 242.0], [517.0, 283.0], [555.0, 115.0], [553.0, 277.5], [570.0, 94.0], [572.0, 118.0], [557.0, 333.0], [569.0, 303.0], [567.0, 338.0], [568.0, 55.0], [607.0, 240.0], [594.0, 79.0], [604.0, 89.5], [596.0, 99.0], [597.0, 251.0], [592.0, 329.0], [601.0, 322.0], [579.0, 258.0], [606.0, 322.0], [593.0, 357.0], [638.0, 217.0], [632.0, 222.5], [618.0, 296.0], [622.0, 89.0], [616.0, 167.0], [639.0, 272.0], [634.0, 304.0], [628.0, 311.0], [626.0, 297.0], [624.0, 317.0], [636.0, 296.0], [637.0, 291.0], [614.0, 299.0], [612.0, 252.0], [641.0, 89.0], [650.0, 272.0], [651.0, 293.0], [648.0, 311.0], [646.0, 155.0], [645.0, 316.0], [644.0, 294.0], [643.0, 172.0], [653.0, 230.0], [655.0, 301.0], [667.0, 274.0], [670.0, 163.0], [671.0, 272.0], [656.0, 304.0], [658.0, 308.5], [659.0, 310.0], [663.0, 298.0], [661.0, 303.0], [660.0, 289.0], [669.0, 212.0], [647.0, 265.0], [664.0, 297.0], [665.0, 294.0], [652.0, 302.0], [697.0, 224.0], [677.0, 270.0], [696.0, 282.0], [679.0, 293.0], [678.0, 293.5], [681.0, 164.0], [682.0, 252.0], [680.0, 286.0], [692.0, 164.5], [691.0, 147.0], [693.0, 170.0], [690.0, 227.0], [683.0, 217.0], [695.0, 265.0], [694.0, 283.0], [672.0, 265.0], [676.0, 285.0], [673.0, 298.0], [675.0, 280.0], [686.0, 282.0], [685.0, 292.0], [703.0, 280.0], [689.0, 273.0], [701.0, 284.0], [700.0, 274.0], [702.0, 283.0], [698.0, 284.0], [699.0, 275.0], [707.0, 259.0], [713.0, 268.0], [712.0, 185.5], [735.0, 137.0], [714.0, 216.0], [720.0, 208.0], [728.0, 107.0], [711.0, 265.0], [734.0, 461.0], [733.0, 276.0], [732.0, 259.0], [731.0, 257.0], [729.0, 271.0], [721.0, 240.0], [726.0, 194.0], [724.0, 235.0], [725.0, 146.0], [723.0, 268.0], [722.0, 205.5], [704.0, 168.0], [717.0, 277.0], [719.0, 278.0], [706.0, 276.0], [710.0, 189.0], [709.0, 276.0], [708.0, 285.5], [762.0, 199.0], [751.0, 109.0], [766.0, 230.0], [755.0, 169.0], [759.0, 236.0], [757.0, 246.0], [756.0, 193.0], [763.0, 220.0], [765.0, 238.0], [764.0, 248.0], [749.0, 171.0], [750.0, 280.0], [748.0, 251.0], [745.0, 272.0], [746.0, 267.0], [739.0, 203.0], [761.0, 268.0], [743.0, 268.0], [740.0, 264.0], [742.0, 261.0], [741.0, 265.0], [754.0, 233.0], [752.0, 261.5], [767.0, 123.0], [736.0, 263.5], [737.0, 250.0], [738.0, 250.0], [772.0, 128.0], [777.0, 226.0], [768.0, 257.0], [780.0, 246.0], [788.0, 150.0], [791.0, 223.5], [790.0, 247.0], [769.0, 239.5], [794.0, 226.0], [795.0, 116.0], [773.0, 260.0], [774.0, 265.5], [799.0, 250.0], [771.0, 257.0], [786.0, 248.0], [784.0, 143.0], [830.0, 172.0], [818.0, 190.0], [828.0, 194.0], [829.0, 149.0], [809.0, 180.0], [823.0, 219.0], [821.0, 101.0], [825.0, 300.5], [820.0, 244.0], [802.0, 248.0], [812.0, 100.0], [831.0, 240.0], [859.0, 156.0], [847.0, 158.0], [857.0, 172.0], [862.0, 241.0], [835.0, 240.0], [858.0, 92.0], [864.0, 162.0], [868.0, 225.0], [892.0, 400.0], [866.0, 390.0], [877.0, 209.0], [880.0, 230.5], [872.0, 257.0], [891.0, 229.0], [910.0, 236.0], [912.0, 238.0], [897.0, 136.0], [903.0, 133.0], [972.0, 219.0], [962.0, 225.0], [990.0, 269.0], [1002.0, 215.0], [1007.0, 213.0], [1006.0, 217.0], [1010.0, 216.0], [994.0, 244.0], [995.0, 237.0], [1028.0, 215.0], [1081.0, 182.5], [1147.0, 236.0], [1124.0, 197.0], [1265.0, 671.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[188.0, 439.0], [235.0, 424.0], [234.0, 419.0], [254.0, 424.0], [264.0, 419.0], [265.0, 393.0], [280.0, 416.0], [287.0, 322.0], [289.0, 188.0], [306.0, 386.0], [350.0, 414.0], [378.0, 28.0], [455.0, 310.0], [480.0, 306.5], [502.0, 9011.0], [516.0, 294.0], [634.0, 229.0], [620.0, 91.0], [646.0, 283.0], [686.0, 188.0], [701.0, 309.0], [734.0, 38.0], [704.0, 131.0], [738.0, 266.0], [779.0, 181.0], [823.0, 189.0], [815.0, 241.0], [831.0, 272.0], [825.0, 142.0], [862.0, 212.0], [845.0, 227.0], [836.0, 283.0], [866.0, 77.0], [892.0, 48.0], [877.0, 180.0], [880.0, 204.0], [872.0, 210.0], [891.0, 200.0], [876.0, 125.0], [871.0, 141.0], [894.0, 175.0], [910.0, 202.0], [912.0, 203.0], [908.0, 209.0], [911.0, 200.0], [936.0, 242.0], [949.0, 165.0], [945.0, 173.0], [972.0, 192.0], [962.0, 192.0], [990.0, 99.0], [985.0, 133.0], [994.0, 206.0], [1002.0, 188.0], [1007.0, 187.0], [1006.0, 189.0], [1010.0, 187.0], [1005.0, 108.0], [996.0, 162.5], [1011.0, 178.0], [995.0, 156.0], [1028.0, 184.0], [1044.0, 159.0], [1081.0, 163.0], [1086.0, 163.0], [1075.0, 142.0], [1034.0, 150.0], [1147.0, 123.0], [1124.0, 170.0], [1088.0, 138.0], [1125.0, 155.0], [1089.0, 167.0], [1116.0, 157.0], [1099.0, 163.0], [1148.0, 142.0], [1145.0, 145.0], [1202.0, 139.0], [1173.0, 143.0], [1170.0, 127.0], [1171.0, 154.0], [1188.0, 103.0], [1181.0, 149.0], [1176.0, 144.0], [1212.0, 160.0], [1187.0, 143.0], [1210.0, 149.5], [1199.0, 161.0], [1163.0, 169.0], [1201.0, 149.0], [1182.0, 165.0], [1203.0, 155.5], [1206.0, 160.0], [1207.0, 163.0], [1249.0, 154.0], [1229.0, 157.0], [1255.0, 101.0], [1239.0, 128.5], [1245.0, 157.0], [1219.0, 149.0], [1240.0, 155.0], [1241.0, 160.0], [1242.0, 160.0], [1222.0, 128.5], [1232.0, 159.0], [1234.0, 149.0], [1236.0, 156.0], [1261.0, 152.0], [1259.0, 155.0], [1260.0, 155.0], [1258.0, 157.0], [1256.0, 146.0], [1262.0, 160.0], [1250.0, 160.0], [1253.0, 158.0], [1254.0, 159.0], [1251.0, 158.0], [1223.0, 163.0], [1227.0, 156.0], [1225.0, 163.0], [1230.0, 160.0], [1264.0, 158.0], [1265.0, 157.0], [1231.0, 159.0], [1266.0, 156.0], [1273.0, 159.0], [1271.0, 156.0], [1278.0, 157.0], [1277.0, 153.0], [1288.0, 147.0], [1307.0, 151.0], [1282.0, 153.0], [1296.0, 153.0], [1285.0, 155.0], [1396.0, 140.0], [1931.0, 92.0], [1961.0, 92.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1961.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 59.266666666666666, "minX": 1.64516226E12, "maxY": 1176.8666666666666, "series": [{"data": [[1.64516226E12, 59.266666666666666], [1.64516256E12, 688.95], [1.64516262E12, 706.5166666666667], [1.64516244E12, 1037.0], [1.64516292E12, 91.8], [1.6451625E12, 1176.8666666666666], [1.64516232E12, 680.3666666666667], [1.6451628E12, 327.73333333333335], [1.64516238E12, 542.2666666666667], [1.64516286E12, 666.25], [1.64516268E12, 689.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64516292E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.64516226E12, "maxY": 1176.8666666666666, "series": [{"data": [[1.64516226E12, 58.583333333333336], [1.64516256E12, 615.8], [1.64516262E12, 706.5166666666667], [1.64516244E12, 122.41666666666667], [1.64516292E12, 92.81666666666666], [1.64516232E12, 678.3666666666667], [1.6451628E12, 3.0], [1.64516238E12, 541.6166666666667], [1.64516286E12, 638.6166666666667], [1.64516268E12, 607.25]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64516256E12, 73.15], [1.64516244E12, 905.1], [1.6451625E12, 1176.8666666666666], [1.6451628E12, 325.1333333333333], [1.64516286E12, 29.216666666666665]], "isOverall": false, "label": "403", "isController": false}, {"data": [[1.64516244E12, 9.483333333333333], [1.64516268E12, 82.73333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64516292E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.64516226E12, "maxY": 1176.8666666666666, "series": [{"data": [[1.64516226E12, 58.583333333333336], [1.64516256E12, 615.8], [1.64516262E12, 706.5166666666667], [1.64516244E12, 122.41666666666667], [1.64516292E12, 92.81666666666666], [1.64516232E12, 678.3666666666667], [1.6451628E12, 3.0], [1.64516238E12, 541.6166666666667], [1.64516286E12, 638.6166666666667], [1.64516268E12, 607.25]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.64516256E12, 73.15], [1.64516244E12, 914.5833333333334], [1.6451625E12, 1176.8666666666666], [1.6451628E12, 325.1333333333333], [1.64516286E12, 29.216666666666665], [1.64516268E12, 82.73333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64516292E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.64516226E12, "maxY": 1176.8666666666666, "series": [{"data": [[1.64516226E12, 58.583333333333336], [1.64516256E12, 615.8], [1.64516262E12, 706.5166666666667], [1.64516244E12, 122.41666666666667], [1.64516292E12, 92.81666666666666], [1.64516232E12, 678.3666666666667], [1.6451628E12, 3.0], [1.64516238E12, 541.6166666666667], [1.64516286E12, 638.6166666666667], [1.64516268E12, 607.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64516256E12, 73.15], [1.64516244E12, 914.5833333333334], [1.6451625E12, 1176.8666666666666], [1.6451628E12, 325.1333333333333], [1.64516286E12, 29.216666666666665], [1.64516268E12, 82.73333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64516292E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

